    @page "/chart"
@inject IJSRuntime JSRuntime
@inject ShakepayApiService ShakepayApiService
@using ChartJs.Blazor.LineChart
<PageTitle>Graph</PageTitle>

<h1>Graph</h1>
<div>
  <Chart Config="_config" @ref="_chart"></Chart>
</div>


@code {
    private LineConfig _config;
    private Chart _chart;
    protected override async Task OnInitializedAsync()
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Net Worth over time"
                    },
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                    }
                }
            };
            var netWorths = await ShakepayApiService.GetNetWorthOverTime();
            IDataset<decimal> dataset1 = new LineDataset<decimal>(netWorths.Select(w => Decimal.Round(w.Worth,2)).ToList())
            {
                Label = "Net Worth",
                BackgroundColor = ColorUtil.ColorHexString(255, 255, 255),
                BorderColor = ColorUtil.ColorHexString(0, 159, 255),
                Fill = FillingMode.Disabled
            };
            (_config.Data.Labels as List<string>).AddRange(netWorths.Select(nw => nw.Date.ToShortDateString()).ToList());
            _config.Data.Datasets.Add(dataset1);

    }
}
